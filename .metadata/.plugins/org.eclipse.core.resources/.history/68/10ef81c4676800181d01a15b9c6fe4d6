package trees;
import java.io.PrintWriter;
import java.util.Scanner;



public class IntTree {
	private IntTreeNode overallRoot;

	// post: constructs an empty tree
	public IntTree() {
		overallRoot = null;
	}

	// post: constructs a tree with the overallRoot set to root
	public IntTree(IntTreeNode root) {
		this.overallRoot = root;
	}
	    // pre : tree is a binary search tree
		// post: value is added to overall tree so as to preserve the binary search
		// tree property
		public void add(int value) {
			overallRoot = add(overallRoot, value);
		}

		// post: value is added to given binary search tree so as to preserve the
		// binary search tree property
		private IntTreeNode add(IntTreeNode root, int value) {
            if(root==null) {
            	root=new IntTreeNode(value);
            } else if (value <= root.data) {
            	root.left = add(root.left,value);
            } else
            	root.right = add(root.right,value);
			return root;
		}
	// This method will print out the contents of the binary tree in a preorder
	// traversal (data left right)
	// with each tree element on a separate line. In front to the data element's
	// value, a code should be written
	// out to the file as well where
	// Code Description
	// 0 leaf node with no children
	// 1 branch node with left child only
	// 2 branch node with right child only
	// 3 branch node with two children
	public void writeTree(PrintWriter fileOut) {
		writeTree(overallRoot, fileOut);
	}

	private void writeTree(IntTreeNode root, PrintWriter fileOut) {
		if (root != null) {
			if(root.left == null && root.right == null) {
				fileOut.println("0 "+root.data);
			}else if(root.left==null) {
				fileOut.println("2 "+root.data);
			}else if(root.right==null) {
				fileOut.println("1 "+root.data);
			}else {
				fileOut.println("3 "+root.data);
			}
			writeTree(root.left, fileOut);
			writeTree(root.right, fileOut);

			
		}

	}

	// This method will read in the contents of the binary tree in a preorder
	// traversal (data left right)
	// with each tree element on a separate line. In front to the data element's
	// value, a code should be written
	// out to the file as well where
	// Code Description
	// 0 leaf node with no children
	// 1 branch node with left child only
	// 2 branch node with right child only
	// 3 branch node with two children
	// You can assume the file will have at least one line
	public void readTree(Scanner input) {
		overallRoot = readTree(overallRoot, input);
	}

	private IntTreeNode readTree(IntTreeNode root, Scanner input) {
		if(input.hasNextLine()) {
			String[] data = input.nextLine().split(" ");
			if(data[0].equals("0")) {
				root = new IntTreeNode(Integer.parseInt(data[1]));
			}else if(data[0].equals("1")) {
				root.left = new IntTreeNode(Integer.parseInt(data[1]));
				root.left = readTree(root.left,input);
			}else if(data[0].equals("2")) {
				root.right = new IntTreeNode(Integer.parseInt(data[1]));
				root = readTree(root.right,input);
			}else {
				root = new IntTreeNode(Integer.parseInt(data[1]));
				root.left = readTree(root.left,input);
				root.right = readTree(root.right,input);
			}
		}
		
		return root;

	}

	// post: prints the tree contents using a preorder traversal
	public void printPreorder() {
		System.out.print("preorder:");
		printPreorder(overallRoot);
		System.out.println();
	}

	// post: prints in preorder the tree with given root
	private void printPreorder(IntTreeNode root) {
		if (root != null) {
			System.out.print(" " + root.data);
			printPreorder(root.left);
			printPreorder(root.right);
		}
	}

	// post: prints the tree contents, one per line, following an
	// inorder traversal and using indentation to indicate node
	// depth; prints right to left so that it looks correct when
	// the output is rotated; prints "empty" for an empty tree
	public void printSideways() {
		if (overallRoot == null) {
			System.out.println("empty tree");
		} else {
			printSideways(overallRoot, 0);
		}
	}

	// post: prints in reversed preorder the tree with given root,
	// indenting each line to the given level
	private void printSideways(IntTreeNode root, int level) {
		if (root != null) {
			printSideways(root.right, level + 1);
			for (int i = 0; i < level; i++) {
				System.out.print("    ");
			}
			System.out.println(root.data);
			printSideways(root.left, level + 1);
		}
	}

	
	
}